pub mod cat;
pub mod p7x;
pub mod pkcs7;

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn decode_pkcs9_content_type() {
        let content_type = [49, 12, 6, 10, 43, 6, 1, 4, 1, 130, 55, 2, 1, 4];
        let (rem, res) = der_parser::parse_der(&content_type).unwrap();
        assert!(rem.is_empty());
        println!("{:#?}", res);
        assert!(false);
    }

    #[test]
    fn decode_opus_info() {
        let opus_info = [49, 2, 48, 0];
        let (rem, res) = der_parser::parse_der(&opus_info).unwrap();
        assert!(rem.is_empty());
        println!("{:#?}", res);
        assert!(false);
    }

    #[test]
    fn decode_pkcs9_message_digest() {
        let message_digest = [
            49, 34, 4, 32, 68, 234, 15, 167, 40, 66, 12, 133, 19, 239, 228, 168, 72, 147, 90, 139,
            75, 131, 41, 111, 247, 70, 28, 251, 130, 190, 57, 136, 200, 159, 93, 116,
        ];
        let (rem, res) = der_parser::parse_der(&message_digest).unwrap();
        assert!(rem.is_empty());
        println!("{:#?}", res);
        assert!(false);
    }

    #[test]
    fn decode_sp_indirect_data() {
        let indirect_data = [
            //160, 130, 1, 8,
            48, 130, 1, 4, // hash rest
            48, 53, // oid 1.3.6.1.4.1.311.2.1.30
            6, 10, 43, 6, 1, 4, 1, 130, 55, 2, 1, 30, // start sequence
            48, 39, // integer
            2, 4, 1, 1, 0, 0, // octet string tag
            4, 16, // octet string payload
            75, 223, 197, 10, 7, 206, 226, 77, 183, 110, 35, 200, 57, 160, 159, 209,
            // int 0
            2, 1, 0, // int 0
            2, 1, 0, // int 0
            2, 1, 0, // int 0
            2, 1, 0, // int 0
            2, 1, 0, // start sequence
            48, 129, 202, // start sequence
            48, 13, // oid 2.16.840.1.101.3.4.2.1
            6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, // null
            5, 0, // octet string tag
            4, 129, 184, // octet string bytes
            65, 80, 80, 88, 65, 88, 80, 67, 37, 112, 168, 185, 134, 72, 152, 136, 166, 55, 137,
            233, 153, 167, 81, 229, 137, 229, 158, 190, 214, 181, 211, 85, 93, 172, 161, 115, 74,
            99, 165, 156, 65, 88, 67, 68, 29, 87, 205, 69, 139, 92, 201, 89, 248, 232, 221, 244,
            67, 120, 231, 192, 229, 135, 200, 178, 242, 207, 83, 145, 88, 83, 238, 30, 255, 54,
            226, 31, 65, 88, 67, 84, 188, 251, 66, 139, 217, 90, 175, 33, 93, 159, 193, 116, 124,
            19, 113, 188, 195, 138, 75, 212, 185, 133, 87, 115, 195, 93, 4, 189, 198, 152, 59, 190,
            65, 88, 66, 77, 228, 142, 202, 253, 204, 232, 223, 220, 131, 162, 12, 252, 106, 74, 3,
            180, 190, 71, 230, 173, 146, 218, 209, 13, 101, 4, 43, 186, 70, 46, 196, 194, 65, 88,
            67, 73, 175, 56, 231, 224, 95, 58, 68, 216, 201, 155, 33, 50, 3, 124, 19, 157, 149,
            107, 194, 174, 170, 108, 34, 110, 128, 107, 240, 29, 11, 129, 67, 233,
        ];
        let (rem, res) = der_parser::parse_der(&indirect_data).unwrap();
        assert!(rem.is_empty());
        println!("{:#?}", res);
        assert!(false);
    }

    #[test]
    fn decode_szoid() {
        let szoid = [
            //160, 130, 5, 23,
            48, 130, 5, 19, 48, 12, 6, 10, 43, 6, 1, 4, 1, 130, 55, 12, 1, 1, 4, 16, 41, 0, 84, 108,
            42, 182, 163, 79, 128, 120, 76, 25, 236, 79, 84, 230, 23, 13, 50, 49, 49, 50, 50, 55,
            49, 53, 50, 50, 48, 52, 90, 48, 14, 6, 10, 43, 6, 1, 4, 1, 130, 55, 12, 1, 3, 5, 0, 48,
            130, 4, 152, 48, 129, 149, 4, 32, 23, 59, 29, 29, 173, 59, 4, 226, 70, 23, 197, 154,
            238, 15, 24, 62, 159, 57, 208, 68, 124, 20, 21, 178, 101, 208, 200, 208, 219, 14, 124,
            10, 49, 113, 48, 16, 6, 10, 43, 6, 1, 4, 1, 130, 55, 12, 2, 3, 49, 2, 128, 0, 48, 93,
            6, 10, 43, 6, 1, 4, 1, 130, 55, 2, 1, 4, 49, 79, 48, 77, 48, 24, 6, 10, 43, 6, 1, 4, 1,
            130, 55, 2, 1, 15, 48, 10, 3, 2, 5, 160, 160, 4, 162, 2, 128, 0, 48, 49, 48, 13, 6, 9,
            96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 4, 32, 23, 59, 29, 29, 173, 59, 4, 226, 70, 23,
            197, 154, 238, 15, 24, 62, 159, 57, 208, 68, 124, 20, 21, 178, 101, 208, 200, 208, 219,
            14, 124, 10, 48, 42, 4, 20, 27, 246, 190, 100, 174, 49, 38, 231, 84, 245, 168, 11, 201,
            1, 147, 44, 62, 143, 136, 142, 49, 18, 48, 16, 6, 10, 43, 6, 1, 4, 1, 130, 55, 12, 2,
            3, 49, 2, 128, 0, 48, 129, 149, 4, 32, 35, 187, 171, 145, 233, 190, 227, 234, 53, 25,
            146, 152, 135, 244, 65, 67, 184, 166, 232, 2, 163, 215, 68, 64, 43, 165, 152, 96, 40,
            209, 209, 47, 49, 113, 48, 16, 6, 10, 43, 6, 1, 4, 1, 130, 55, 12, 2, 3, 49, 2, 128, 0,
            48, 93, 6, 10, 43, 6, 1, 4, 1, 130, 55, 2, 1, 4, 49, 79, 48, 77, 48, 24, 6, 10, 43, 6,
            1, 4, 1, 130, 55, 2, 1, 15, 48, 10, 3, 2, 5, 160, 160, 4, 162, 2, 128, 0, 48, 49, 48,
            13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 4, 32, 35, 187, 171, 145, 233, 190,
            227, 234, 53, 25, 146, 152, 135, 244, 65, 67, 184, 166, 232, 2, 163, 215, 68, 64, 43,
            165, 152, 96, 40, 209, 209, 47, 48, 42, 4, 20, 43, 107, 183, 163, 78, 239, 219, 150,
            184, 69, 184, 229, 121, 151, 97, 124, 149, 169, 92, 108, 49, 18, 48, 16, 6, 10, 43, 6,
            1, 4, 1, 130, 55, 12, 2, 3, 49, 2, 128, 0, 48, 42, 4, 20, 46, 238, 101, 77, 17, 231,
            70, 32, 192, 53, 185, 47, 81, 251, 4, 8, 86, 141, 17, 105, 49, 18, 48, 16, 6, 10, 43,
            6, 1, 4, 1, 130, 55, 12, 2, 3, 49, 2, 128, 0, 48, 129, 149, 4, 32, 64, 185, 18, 38, 60,
            99, 174, 238, 90, 23, 20, 5, 202, 66, 158, 247, 140, 252, 199, 63, 144, 221, 189, 200,
            190, 211, 95, 75, 118, 136, 193, 254, 49, 113, 48, 16, 6, 10, 43, 6, 1, 4, 1, 130, 55,
            12, 2, 3, 49, 2, 128, 0, 48, 93, 6, 10, 43, 6, 1, 4, 1, 130, 55, 2, 1, 4, 49, 79, 48,
            77, 48, 24, 6, 10, 43, 6, 1, 4, 1, 130, 55, 2, 1, 15, 48, 10, 3, 2, 5, 160, 160, 4,
            162, 2, 128, 0, 48, 49, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 4, 32, 64,
            185, 18, 38, 60, 99, 174, 238, 90, 23, 20, 5, 202, 66, 158, 247, 140, 252, 199, 63,
            144, 221, 189, 200, 190, 211, 95, 75, 118, 136, 193, 254, 48, 129, 149, 4, 32, 73, 234,
            241, 118, 0, 254, 241, 219, 181, 83, 17, 154, 64, 138, 211, 196, 24, 21, 129, 255, 33,
            50, 184, 202, 108, 128, 195, 154, 211, 152, 194, 196, 49, 113, 48, 16, 6, 10, 43, 6, 1,
            4, 1, 130, 55, 12, 2, 3, 49, 2, 128, 0, 48, 93, 6, 10, 43, 6, 1, 4, 1, 130, 55, 2, 1,
            4, 49, 79, 48, 77, 48, 24, 6, 10, 43, 6, 1, 4, 1, 130, 55, 2, 1, 15, 48, 10, 3, 2, 5,
            160, 160, 4, 162, 2, 128, 0, 48, 49, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5,
            0, 4, 32, 73, 234, 241, 118, 0, 254, 241, 219, 181, 83, 17, 154, 64, 138, 211, 196, 24,
            21, 129, 255, 33, 50, 184, 202, 108, 128, 195, 154, 211, 152, 194, 196, 48, 129, 149,
            4, 32, 83, 158, 103, 27, 242, 153, 69, 146, 81, 55, 146, 6, 168, 149, 180, 132, 58,
            114, 196, 119, 75, 23, 54, 148, 137, 64, 19, 67, 72, 175, 128, 88, 49, 113, 48, 16, 6,
            10, 43, 6, 1, 4, 1, 130, 55, 12, 2, 3, 49, 2, 128, 0, 48, 93, 6, 10, 43, 6, 1, 4, 1,
            130, 55, 2, 1, 4, 49, 79, 48, 77, 48, 24, 6, 10, 43, 6, 1, 4, 1, 130, 55, 2, 1, 15, 48,
            10, 3, 2, 5, 160, 160, 4, 162, 2, 128, 0, 48, 49, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3,
            4, 2, 1, 5, 0, 4, 32, 83, 158, 103, 27, 242, 153, 69, 146, 81, 55, 146, 6, 168, 149,
            180, 132, 58, 114, 196, 119, 75, 23, 54, 148, 137, 64, 19, 67, 72, 175, 128, 88, 48,
            129, 149, 4, 32, 126, 10, 126, 72, 107, 252, 100, 155, 72, 100, 190, 139, 194, 17, 163,
            216, 237, 136, 59, 64, 191, 129, 21, 173, 232, 235, 109, 92, 212, 199, 230, 241, 49,
            113, 48, 16, 6, 10, 43, 6, 1, 4, 1, 130, 55, 12, 2, 3, 49, 2, 128, 0, 48, 93, 6, 10,
            43, 6, 1, 4, 1, 130, 55, 2, 1, 4, 49, 79, 48, 77, 48, 24, 6, 10, 43, 6, 1, 4, 1, 130,
            55, 2, 1, 15, 48, 10, 3, 2, 5, 160, 160, 4, 162, 2, 128, 0, 48, 49, 48, 13, 6, 9, 96,
            134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 4, 32, 126, 10, 126, 72, 107, 252, 100, 155, 72,
            100, 190, 139, 194, 17, 163, 216, 237, 136, 59, 64, 191, 129, 21, 173, 232, 235, 109,
            92, 212, 199, 230, 241, 48, 42, 4, 20, 154, 240, 3, 223, 34, 0, 65, 167, 139, 180, 67,
            62, 91, 4, 105, 135, 121, 137, 28, 70, 49, 18, 48, 16, 6, 10, 43, 6, 1, 4, 1, 130, 55,
            12, 2, 3, 49, 2, 128, 0, 48, 42, 4, 20, 214, 41, 114, 96, 206, 145, 15, 35, 158, 175,
            204, 119, 170, 165, 18, 129, 227, 60, 213, 73, 49, 18, 48, 16, 6, 10, 43, 6, 1, 4, 1,
            130, 55, 12, 2, 3, 49, 2, 128, 0, 48, 42, 4, 20, 215, 124, 170, 253, 41, 139, 139, 9,
            185, 131, 127, 37, 81, 37, 47, 129, 23, 234, 16, 119, 49, 18, 48, 16, 6, 10, 43, 6, 1,
            4, 1, 130, 55, 12, 2, 3, 49, 2, 128, 0, 160, 54, 48, 52, 48, 50, 6, 10, 43, 6, 1, 4, 1,
            130, 55, 12, 2, 1, 4, 36, 48, 34, 30, 12, 0, 79, 0, 83, 0, 65, 0, 116, 0, 116, 0, 114,
            2, 4, 16, 1, 0, 1, 4, 12, 50, 0, 58, 0, 54, 0, 46, 0, 50, 0, 0, 0,
        ];
        let (rem, res) = der_parser::parse_der(&szoid).unwrap();
        assert!(rem.is_empty());
        println!("{:#?}", res);
        assert!(false);
    }

    #[test]
    fn test_mask() {
        println!("{}", 130 & 0x80);
    }

    #[test]
    fn test_sign() {
        use rsa::pkcs8::FromPrivateKey;
        use rsa::{Hash, PaddingScheme, RsaPrivateKey};
        let digest = [
            68, 234, 15, 167, 40, 66, 12, 133, 19, 239, 228, 168, 72, 147, 90, 139, 75, 131, 41,
            111, 247, 70, 28, 251, 130, 190, 57, 136, 200, 159, 93, 116,
        ];
        const KEY: &str = include_str!("key.pem");
        let signature = b"\x7f\x13uP\xc8m:\x99\xb6\x89u\x85y\xea\xfc\xd8Cw\x96w\x10>j\xa7Z\x8c\xa3\x1f\\\xf4\x82\\\xdf\x8eh;\x10\x16o/\"i\x89\xb9\xf1\x03\x9c\xb0)\x9f\xc4\xfe\xf1\x05\x93\xbeJ\xd2\xeb\xe3\xb1f\xb1rq\x89\xdf\x7f\xe4\xe1\n\xae\xa70\x8c|\xd3\xe6\xe6/\xad\x97\xcb1\xb6\xa0\xf9\x16z\x83R#\xe8n\r\xfdErJ\x01\xfb\xd4\xef\x05\xf9\xab\x08o\x16\xbc)C\xee\x03=$\x88>G\xa4\xba)\xbc\xf4n6\xaa\xfd\xa7e\x15\xb9,|\xd6\xf9\x9b>\xe8\x95\xf7\xc6\x08\n\t\x8a\xd5{j\x8a\xfe{,O\xf3\xd9\x8a\xc79\x9f\x80\xcd\x17k8\xf8\xb3\xc3\x96\xd8\x1a/\xa8\x14R\x14\xaf\x813\x91;>\x99\xd24\x86J\x12\x0e\x89\x0c\xb8?\xfa\xa8\x1dM\x98@vz'\xe6y\xab\xc0\xcb\xc5\xb3\xbeC'$\"\xd2\x15\xaf0\xa3\x05\xcbj\x18j\x11\xa2\xfd\xe7\xe6y\xcf\xadd\x99\xa9\xdc\xc4\xc2`\x1d\xb0\xe3\xdb\xfeC\xdc\xce\xe5@\xde;P\xfav\x8c\xff";
        let key = RsaPrivateKey::from_pkcs8_pem(KEY).unwrap();
        let padding = PaddingScheme::new_pkcs1v15_sign(Some(Hash::SHA2_256));
        let sig = key.sign(padding, &digest).unwrap();
        assert_eq!(sig.len(), signature.len());
        assert_eq!(sig, signature);
    }
}
